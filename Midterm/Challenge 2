function Get-ApacheAccessLogs {
    [CmdletBinding()]
    param(
        [Parameter(Mandatory=$true)]
        [string]$LogPath,

        [Parameter(Mandatory=$true)]
        [string]$IOCPath
    )

    # 1️⃣ Load IOC patterns from the HTML table
    [xml]$iocHtml = Get-Content -Path $IOCPath -Raw
    $iocPatterns = $iocHtml.html.body.table.tr |
        Where-Object { $_.td } |
        ForEach-Object { $_.td[0].'#text' }

    Write-Host "Loaded $($iocPatterns.Count) IOC patterns:`n" -ForegroundColor Cyan
    $iocPatterns | ForEach-Object { Write-Host " - $_" -ForegroundColor Yellow }

    # 2️⃣ Define Apache log regex
    $pattern = '^(?<ip>\S+) \S+ \S+ \[(?<time>[^\]]+)\] "(?<request>[^"]*)" (?<status>\d{3}) (?<bytes>\S+) "(?<referrer>[^"]*)" "(?<agent>[^"]*)"'

    Write-Host "`nScanning $LogPath for suspicious activity..." -ForegroundColor Cyan

    # 3️⃣ Parse and check each log entry
    Get-Content -Path $LogPath | ForEach-Object {
        if ($_ -match $pattern) {
            $ip = $matches['ip']
            $time = $matches['time']
            $request = $matches['request']
            $status = $matches['status']

            # Check for IOCs
            foreach ($ioc in $iocPatterns) {
                if ($request -match [regex]::Escape($ioc)) {
                    [pscustomobject]@{
                        IP        = $ip
                        Time      = $time
                        Request   = $request
                        Response  = $status
                        IOCMatch  = $ioc
                    }
                }
            }
        }
    }
}
